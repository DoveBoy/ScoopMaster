# Copyright (c) 2023 okibcn
# This is free software, licensed under the GNU General Public License v3.0
# See /LICENSE for more information.
# https://github.com/okibcn/ScoopMaster
# Description: Scoop Meta-Bucket

name: Harvester
on:
  schedule:
    - cron: '21,51 * * * *'
  # runs every 30 mins, at minutes 21 and 51 of each hour.
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled true/false (default: false)'
        required: false
        default: 'false'
        type: choice
        options:
          - "true"
          - "false"

jobs:
  build:
    runs-on: windows-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - name: "‚è¨ Checkout repository"
      uses: actions/checkout@v3


    - name: "üîç Discover known buckets from Scoop-Directory website."
      run: |
        cd ..
        $scoopDBURL = "https://rasa.github.io/scoop-directory/by-apps.html"
        $ErrorActionPreference = 'SilentlyContinue'
        $lBuckets = [System.Collections.ArrayList]@()
        $source = iwr $scoopDBURL
        $source.Content -split '\r?\n' | ForEach-Object -Process {
            if ($_ -match '<h2.*(http[^\"]+)"'){
                [void]$lBuckets.Add($matches[1])
            }
        }
        $lBuckets > Bucket_list.txt
        Write-Host "$($lBuckets.count) buckets found."



    - name: "‚è¨ Download known buckets"
      run: |
        cd ..
        $lBuckets=(cat .\Bucket_list.txt)

        ## CREATE INPUT FILE FOR ARIA2C
        $lZips=$lBuckets | %{
            if( -not ($_ -match 'https:\/\/github.com\/(.+)')){
              $_ >> ERROR_badrepos.txt
              return}
            if(($_ -match 'okibcn\/ScoopMaster')){
              return}
            $owner_repo=$matches[1].replace('/','~')
            return "$_/archive/refs/heads/master.zip`n    out=$owner_repo.zip"
        }
        $lZips > download_list.txt
        echo "UPDATE=$(Get-Date -format 'yyyy-MM-ddTHH:mm:ssZ')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # DOWNLOAD BUCKETS
        aria2c --save-session aria2-out.txt -j 16 -i download_list.txt -d zips
        (cmd.exe /c dir /s /b /a-d zips) > Zip_list.txt
        echo "N_BUCKETS=$((cat .\Zip_list.txt).count)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append



    - name: "üìÉ Extract manifests from downloaded buckets"
      run: |
        cd ..
        # EXTRACT MANIFESTS
        7z e -y zips/*.zip -ojsons/* */bucket/*.json */*.json
        # PREPARE OUTPUT
        Remove-Item -Force -Recurse jsons/*/.*.json
        $nManifests = (cmd.exe /c dir /s /b /a-d jsons).count
        $nZips = (cat .\Zip_list.txt).count
        Write-Host "PROCESS COMPLETED. $nManifests manifests extracted from $nZips downloaded buckets."


    - name: "üìù Indexing JSON manifests"
      run: |
        function longV([string]$v) {
            $numbers = [regex]::matches($v, '\d+')
            if ($numbers.Count -eq 0) {
                #doesn't contain numbers
                return $v
            }
            $notnumbers = [regex]::matches($v, '([^\d]+)')
            $longnumbers = @($numbers | % {
                    $_.Value.PadLeft(10, '0')
                })
            $i = [int]0
            if ($numbers[0].Index -eq 0) {
                # starts with a number
                ($longnumbers | % { $_ ; $notnumbers[$i].value ; $i++ }) -join ''
            }
            else {
                ($notnumbers | % { $_.Value ; $longnumbers[$i] ; $i++ }) -join ''
            }
        }

        # Returns 0 if both versions match, 1 if the firs one is higher,
        # and -1 if the second is higher
        function CompareV([string]$a, [string]$b) {
            if ($a -eq $b) {
                return 0
            }
            if ( $(longV $a) -gt $(longV $b)) {
                return 1
            }
            return -1
        }

        cd ..
        ## PROCESS JSON FILES
        $FullDB = $null
        $FullDB = New-Object system.data.datatable
        $FullDB.Columns.Add("Name") | Out-Null
        $FullDB.Columns.Add("Version") | Out-Null
        $FullDB.Columns.Add("Date") | Out-Null
        $FullDB.Columns.Add("Bucket") | Out-Null
        $FullDB.Columns.Add("Description") | Out-Null

        $files = gci jsons/*/*.json
        $nManifests=$files.Count
        $progress=0
        Write-host "##"
        Write-host "##   INDEXING JSON FILES..."
        Write-host "##   ================================="
        Write-host "##"
        foreach ( $file in $files ) {
            $name = $file.BaseName
            $bucket = $file.FullName.split('\')[-2].replace('~', "/")
            $progress++
            $percent = [math]::round(100 * $progress / $nManifests)
            if ($percent -ne $oldpercent){
              Write-Output "( $percent% )  $progress / $nManifests (indexed/total) Indexing bucket $bucket"
              $oldpercent=$percent
            }
            $date = $file.LastWriteTimeUtc.ToString("yyyy-MM-ddTHH:mm:ssZ")
            try{
                $json = (cat $file) | ConvertFrom-Json
                $version = $json.version
                $description = "$($json.description)"
            }catch{
                $file.fullname >> ERROR_manifest.txt
                continue
            }
            [void]$FullDB.Rows.Add($name, $version, $date, $bucket, $description)
        }
        $DB = $FullDB | Sort-Object Name

        $hash = $null
        $hash = New-Object system.data.datatable
        $hash.Columns.Add("Name") | Out-Null
        $hash.Columns.Add("Version") | Out-Null
        $hash.Columns.Add("FirstDate") | Out-Null
        $hash.Columns.Add("FirstBucket") | Out-Null
        $hash.Columns.Add("LastDate") | Out-Null
        $hash.Columns.Add("LastBucket") | Out-Null
        $hash.Columns.Add("Description") | Out-Null

        $name = ""
        $nApps = 0
        $progress=0
        Write-host "##"
        Write-host "##   SEARCHING LATEST VERSIONS..."
        Write-host "##   ================================="
        Write-host "##"
        foreach ( $row in $DB ) {
            $progress++
            $percent = [math]::round(100 * $progress / $nManifests)
            if ($percent -ne $oldpercent){
              Write-Output "( $percent% )  $nApps / $progress / $nManifests (harvested/indexed/total) Last checked app: $name.json"
              $oldpercent=$percent
            }
            if ($row.name -ne $name) {
                $name = $row.name
                [void]$hash.Rows.Add($name, $row.version, $row.date, $row.bucket, $row.date, $row.bucket, $row.description)
                $nApps++
                continue
            }
            switch ( CompareV $row.Version $hash.Rows[-1].Version ) {
                -1 {
                    break
                }
                1 {
                    $hash.Rows[-1].Version = $row.Version
                    $hash.Rows[-1].FirstDate = $row.Date
                    $hash.Rows[-1].FirstBucket = $row.Bucket
                    $hash.Rows[-1].LastDate = $row.Date
                    $hash.Rows[-1].LastBucket = $row.Bucket
                    $hash.Rows[-1].Description = $row.Description
                }
                0 {
                    if ($row.date -gt $hash.Rows[-1].LastDate) {
                        $hash.Rows[-1].LastDate = $row.Date
                        $hash.Rows[-1].LastBucket = $row.Bucket
                    }
                    elseif ($row.date -lt $hash.Rows[-1].FirstDate) {
                        $hash.Rows[-1].FirstDate = $row.Date
                        $hash.Rows[-1].FirstBucket = $row.Bucket
                    }
                }
            }
        }
        $hash = $hash | Sort-Object Name
        $scoopDBfile = "./LastAppsDB.csv"
        $hash | ConvertTo-csv > $scoopDBfile


        mkdir local | Out-Null
        $progress=0
        $nApps=$hash.rows.count
        Write-host "##"
        Write-host "##   GATHERING SELECTED MANIFESTS..."
        Write-host "##   ================================="
        Write-host "##"
        foreach ( $row in $hash ) {
            [void]$FullDB.Rows.Add($row.Name, $row.Version, $row.FirstDate, "okibcn/ScoopMaster", $row.Description)
            Move-Item "jsons/$( $row.FirstBucket.replace('/','~') )/$($row.Name).json" local | Out-Null
            $progress++
            $percent = [math]::round(100 * $progress / $nApps)
            if ($percent -ne $oldpercent){
              Write-Output "( $percent% )  $progress / $nApps (hasvested/total) Last harvested app: $($row.Name).json"
              $oldpercent=$percent
            }
        }
        $FullDB = $FullDB | Sort-Object Name,Date
        $scoopDBfile = "./AllAppsDB.csv"
        $FullDB | ConvertTo-csv > $scoopDBfile
        echo "N_MANIFESTS=$nManifests" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "N_APPS=$nApps" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append


    - name: "üì¶ Prepare updated repo"
      run: |
        ############################
        ##                          ##
        ##     PREPARE PACKAGE      ##
        ##                          ##
        ############################


        $lDeleted = $lUpdated = $lNew = @()
        $current = gci bucket/*.json
        $progress = 0
        Write-host "##"
        Write-host "##   CHECKING MODIFIED APPS..."
        Write-host "##   ================================="
        Write-host "##"
        foreach ($file in $current) {
            $progress++
            $percent = [math]::round(100 * $progress / $env:N_APPS)
            if ($percent -ne $oldpercent){
              Write-Output "( $percent% )  $progress / $env:N_APPS (reviewed/total) Last checked app: $($file.BaseName)"
              $oldpercent=$percent
            }

            $candidate = "../local/$($file.Name)"
            if (-not (test-path $candidate)) {
                Remove-Item $file
                $lDeleted += $file.BaseName
                continue
            }
            $hFile = (Get-FileHash -Algorithm SHA1 $file).Hash
            $hCandidate = (Get-FileHash -Algorithm SHA1 $candidate).Hash
            if ($hCandidate -eq $hFile) {
                Remove-Item $candidate
                continue
            }
            Move-Item $candidate $file -Force
            $lUpdated += $file
        }
        $lNew = (gci ../local/*).BaseName
        move-item ../local/* bucket -Force

        $lDeleted > AppsLeavingScoop.txt
        $lUpdated > AppsUpdated.txt
        $lNew > AppsNew.txt

        move-item ../*.csv .
        7z a AllAppsDB.7z AllAppsDB.csv
        7z a LastAppsDB.7z LastAppsDB.csv

        move-item ../*.txt .
        Write-Output "These databases are updated every 30 minutes. The current content and metrics for these databases are:" > body.txt
        Write-Output "- **AllAppsDB** contains info of **$($env:N_MANIFESTS)** manifests in **$($env:N_BUCKETS)** online buckets." >> body.txt
        Write-Output "- **LastAppsDB** contains highest version of each of the **$($env:N_APPS)** apps in Scoop, all of them contained in this bucket." >> body.txt
        Write-Output " " >> body.txt
        Write-Output "These databases can be used for fast online data retrieval, for instance by CLI scoop search utilities such as `ss` (ScoopSearch)" >> body.txt
        Write-Output " " >> body.txt
        Write-Output "The current snapshot timestamp for these databases is $($env:UPDATE). In the last 30 minutes:" >> body.txt
        Write-Output "- $($lNew.count) apps were added to Scoop." >> body.txt
        Write-Output "- $($lUpdated.count) apps were updated." >> body.txt
        Write-Output "- $($lDeleted.count) apps left Scoop." >> body.txt

        Write-Output " "
        Write-Output " "
        Write-Output "- AllAppsDB contains the data of **$($env:N_MANIFESTS)** manifests in $($env:N_BUCKETS) online buckets."
        Write-Output "- LastAppsDB contains highest version of each of the $($env:N_APPS) apps in Scoop, all of them contained in this bucket."
        Write-Output " "
        Write-Output "The current snapshot timestamp for these databases is $($env:UPDATE). In the last 30 minutes:"
        Write-Output "- $($lNew.count) apps were added to Scoop."
        Write-Output "- $($lUpdated.count) apps were updated."
        Write-Output "- $($lDeleted.count) apps left Scoop."


    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'
        ## More info at https://til.simonwillison.net/github-actions/debug-tmate
        ##           or https://github.com/mxschmitt/action-tmate


    - name: "‚≠ê Update repo (Commit-n-Push)"
      run: |
        # git -C . init
        git -C . config --local core.autocrlf false
        git -C . config --global core.safecrlf false
        git -C . config --local user.name "GitHub Actions"
        git -C . config --local user.email actions@github.com
        git -C . add -A
        git -C . commit --no-verify -m "Update timestamp $($env:UPDATE)"
        $sha=(git -C . rev-parse HEAD)
        git push

    # - name: "üßπ Delete current release assets"
    #   uses: andreaswilli/delete-release-assets-action@v2.0.0
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     tag: Databases
    #     deleteOnlyFromDrafts: false


    - name: "üëç Upload detailed logs as Artifact"
      uses: actions/upload-artifact@v3
      # if: github.event_name == 'workflow_dispatch'
      with:
        name: Logs
        path: |
          *.txt


    - name: "üéâ Release updated databases"
      uses: softprops/action-gh-release@v0.1.15
      # go to https://github.com/OWNER/REPO/settings/actions and
      # in "**"Workflow Permissions" section give actions **Read and Write permissions**.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Databases
        body_path: body.txt
        files: ./*DB.*
