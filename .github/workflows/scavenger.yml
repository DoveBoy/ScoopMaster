# Copyright (c) 2023 okibcn
# This is free software, licensed under the GNU General Public License v3.0
# See /LICENSE for more information.
# https://github.com/okibcn/ScoopMaster
# Description: Scoop Meta-Bucket

name: Scavenger
on:
  schedule:
    - cron: '52 * * * *'
  # runs at minute 52 of each hour.
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled true/false (default: false)'
        required: false
        default: 'false'
        type: choice
        options: 
          - "true"
          - "false"

jobs:
  build:
    runs-on: windows-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
    - name: "‚è¨ Checkout repository"
      uses: actions/checkout@v3


    - name: "üîç Discover known buckets from Scoop-Directory website."
      run: |
        cd ..
        $scoopDBURL = "https://rasa.github.io/scoop-directory/by-apps.html"
        $ErrorActionPreference = 'SilentlyContinue'
        $lBuckets = [System.Collections.ArrayList]@()
        $source = iwr $scoopDBURL
        $source.Content -split '\r?\n' | ForEach-Object -Process {
            if ($_ -match '<h2.*(http[^\"]+)"'){
                [void]$lBuckets.Add($matches[1])
            }
        }
        $lBuckets > Bucket_list.txt
        Write-Host "$($lBuckets.count) buckets found."

        

    - name: "‚è¨ Download known buckets"
      run: |
        cd ..
        $lBuckets=(cat .\Bucket_list.txt)
        ## CREATE INPUT FILE FOR ARIA2C
        $lZips=$lBuckets | %{
            if( -not ($_ -match 'https:\/\/github.com\/(.+)')){
              $_ >> ERROR_badrepos.txt
              return}
            if(($_ -match 'okibcn\/ScoopMaster')){
              return}
            $owner_repo=$matches[1].replace('/','~')
            return "$_/archive/refs/heads/master.zip`n    out=$owner_repo.zip"
        }
        $lZips > download_list.txt   

        # DOWNLOAD BUCKETS
        aria2c --save-session aria2-out.txt -j 16 -i download_list.txt -d zips
        (cmd.exe /c dir /s /b /a-d zips) > Zip_list.txt


    - name: "üìÉ Extract manifests from downloaded buckets"
      run: |
        cd ..
        # EXTRACT MANIFESTS
        7z e -y zips/*.zip -ojsons/* */bucket/*.json */*.json
        # PREPARE OUTPUT
        Remove-Item -Force -Recurse jsons/*/.*.json
        $nJsons = (cmd.exe /c dir /s /b /a-d jsons).count
        $nZips = (cat .\Zip_list.txt).count
        Write-Host "PROCESS COMPLETED. $nJsons manifests extracted from $nZips downloaded buckets."


    - name: "üßπ Remove old duplicated manifests"
      run: |
        function longV([string]$v){
            $numbers = [regex]::matches($v, '\d+')
            if ($numbers.Count -eq 0){   #doesn't contain numbers
                return $v}
            $notnumbers = [regex]::matches($v, '([^\d]+)')
            $longnumbers = @($numbers | % {
                $_.Value.PadLeft(10,'0')
            })
            $i=[int]0
            if ($numbers[0].Index -eq 0){   # starts with a number
                ($longnumbers | % { $_ ; $notnumbers[$i].value ; $i++}) -join ''
            }else {
                ($notnumbers | % { $_.Value ; $longnumbers[$i] ; $i++}) -join ''
            }
        }


        # Returns 0 if both versions match, 1 if the firs one is higher,
        # and -1 if the second is higher
        function CompareV([string]$a,[string]$b){
            if ($a -eq $b){
                return 0
            }
            if ( $(longV $a) -gt $(longV $b)){
                return 1
            }
            return -1
        }

        cd ..
        mkdir local -Force | Out-Null
        $progress=0
        $oldpercent=0
        $nlocal=0
        $hVersion = @{}
        $hDate = @{}
        $hBucket = @{}
        $njsons=(cmd.exe /c dir /s /b /a-d jsons).count
        Write-Host "Processing $njsons manifests...`n"
        $files=gci jsons/*/*.json
        foreach( $file in $files ) {
          # FOR EACH PACKETFILE IN BUCKET
          $name=$file.BaseName
          $bucket=$file.FullName.split('\')[-2].replace('~',"/")
          $progress++
          $percent = [math]::round(100 * $progress / $njsons)
          if ($percent -ne $oldpercent){
            Write-Output "( $percent% )  $nlocal / $progress / $njsons (selected/processed/total) Processing bucket $bucket"
            $oldpercent=$percent
          }
          $errorCount=$error.Count
          try{$version=(Get-Content $file | ConvertFrom-Json).version}
          catch{
            "$name.json in bucket http://github.com/$bucket" >> ERROR_manifest.txt
            continue
          }
          if ($errorCount -ne $error.Count){
            continue}
          $date=$file.LastWriteTimeUtc
          if  (-NOT $hVersion.ContainsKey($name)){
              # New Manifest, Add to DB
              Copy-Item $file ./local -Force
              $hVersion.add($name,$version)
              $hDate.add($name,$date)
              $hBucket.add($name,$bucket)
              $nlocal++
              continue
          }
          switch(CompareV $version $hVersion[$name]){
          -1  {
                  break}
          1  {
                  # Higher Version, Update Manifest in DB
                  Copy-Item $file ./local -Force
                  $hVersion.Set_Item($name,$version)
                  $hDate.Set_Item($name,$date)
                  $hBucket.Set_Item($name,$bucket)
                  break
              }
          0  {
                  if (($date -gt $hDate[$name])){
                      # Same Version, Higher Date Update Manifest in DB
                      Copy-Item $file ./local -Force
                      $hDate.Set_Item($name,$date)
                      $hBucket.Set_Item($name,$bucket)
                  }
              }
          }
        }
        Write-Host "PROCESS COMPLETED. $nlocal different packages with the most recent manifest out of a total of $njsons manifests."
        if(Test-Path ERROR_manifest.txt){
            Write-Host "The following manifests have errors:"
            cat ./ERROR_manifest.txt
        } 
      

    - name: "üì¶ Create Package"
      run: |
        ############################
        ##                          ##
        ##      CREATE PACKAGE      ##
        ##                          ##
        ############################

        remove-item bucket -Recurse -Force
        move-item ../local bucket
        move-item ../*.txt .
        echo "UPDATE=$(date -R -u)" >>$GITHUB_ENV

    
    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'
        ## More info at https://til.simonwillison.net/github-actions/debug-tmate
        ##           or https://github.com/mxschmitt/action-tmate


    - name: "‚≠ê Update repo"
      run: |
        git -C . init
        git -C . add -A
        git -C . config --local user.name "GitHub Actions"
        git -C . config --local user.email actions@github.com
        git -C . commit --no-verify -m "Updated on $(date -R -u)"
        $sha=(git -C . rev-parse HEAD)
        git push


    - name: "üëã If no new sources are available, then we stop."
      if:  env.CANCEL == 'true'
      uses: andymckay/cancel-action@0.3


    - name: "üëç Upload logs as Artifact"
      uses: actions/upload-artifact@v3
      if: github.event_name == 'workflow_dispatch'
      with:
        name: Logs
        path: |
          *.txt
